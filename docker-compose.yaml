version: "3"

services:
  
  db:
    image: postgres:11
    expose:
      - 5342
    # ports:
    #   - "5432:5432"
    environment:
      - POSTGRES_USER=smsapiuser
      - POSTGRES_PASSWORD=smsapipassword
      - POSTGRES_DB=smsapi
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public
  
  web:
    build: ./proj
    command: bash -c "alembic upgrade head && gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8080"
    volumes:
      - ./proj:/usr/src/app
    expose:
      - 8080
    # ports:
    #   - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://smsapiuser:smsapipassword@db:5432/smsapi
    depends_on:
      - db
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.app.loadbalancer.server.port=8080
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.app-http.entrypoints=http
      - traefik.http.routers.app-http.rule=Host(`fastapi-with-traefik.localhost`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.app-https.entrypoints=https
      - traefik.http.routers.app-https.rule=Host(`fastapi-with-traefik.localhost`)
      - traefik.http.routers.app-https.tls=true
      # # Use the "le" (Let's Encrypt) resolver
      # - traefik.http.routers.app-https.tls.certresolver=le
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware to redirect HTTP to HTTPS
      - traefik.http.routers.app-http.middlewares=https-redirect
      # - traefik.http.routers.app-https.middlewares=admin-auth
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

networks:
  traefik-public:
    external: true